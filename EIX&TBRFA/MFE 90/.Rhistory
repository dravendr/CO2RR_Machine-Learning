edges[j,3]<-mean(c(edges[j,3],edges[j3,3]))
edges<-edges[-j3,]
}
}
x_y<-data.frame(Source=c(rep('FE90',20)),
Target=im_frame$variable,
Weight=im_frame[4],
Type=c(rep('x-y',20)))
colnames(x_y)<-c('Source','Target','Weight','Type')
edges<-rbind(edges,x_y)
edges[3][edges[3]<=0]<-0
for (j in 1:nrow(nodes[1])){
edges[edges==nodes[j,1]]<-nodes[j,2]
}
##################################################
interactions_frame_rel <- min_depth_interactions(forest,mean_sample = "relevant_trees", uncond_mean_sample = "relevant_trees")
interactions_frame <- min_depth_interactions(forest)
plot_min_depth_distribution(forest)
plot_min_depth_interactions(interactions_frame)
plot_min_depth_interactions(interactions_frame_rel)
##################################################
write.csv(interactions_frame,paste0('sum/inter_sum','.csv'),row.names=FALSE,fileEncoding='UTF-8')
##################################################
total_inter_counts<-c(3421, 3502, 3043, 1245, 988, 832, 1070, 3925, 4125, 3895, 3726, 3606, 3520, 3602, 3435, 3106, 3387, 1265, 3267, 3132)
total_inter_counts<-100*(total_inter_counts/max(total_inter_counts))*(total_inter_counts/max(total_inter_counts))*(total_inter_counts/max(total_inter_counts))*(total_inter_counts/max(total_inter_counts))
nodes$total_inter<-c(total_inter_counts,max(total_inter_counts))
##################################################
#write.csv(nodes,paste0('test/nodes----','FE90','.csv'),row.names=FALSE,fileEncoding='UTF-8')
#write.csv(edges,paste0('test/edges----','FE90','.csv'),row.names=FALSE,fileEncoding='UTF-8')
##################################################
#EDG<-read_csv('test/edges----FE90.csv')
#NDS<-read_csv('test/nodes----FE90.csv')
##################################################
EDG<-edges
NDS<-nodes
EDG[1]<-sapply(EDG[1],as.numeric)
EDG[2]<-sapply(EDG[2],as.numeric)
EDG[1]<-EDG[1]-1
NDS[2]<-NDS[2]-1
EDG[3]<-10*EDG[3]*EDG[3]*EDG[3]*EDG[3]
red_index<-((EDG $ Weight> (nthmax(EDG$Weight,21)))&(EDG$Source!=20)&(EDG$Target!=20))[,1]
##################################################
NETWORK <- forceNetwork(Links = EDG,#绾挎€ц川鏁版嵁妗?
Nodes = NDS,#鑺傜偣鎬ц川鏁版嵁妗?
Source = "Source",#杩炵嚎鐨勬簮鍙橀噺
Target = "Target",#杩炵嚎鐨勭洰鏍囧彉閲?
Value = "Weight",#杩炵嚎鐨勭矖缁嗗€?
NodeID = "label",#鑺傜偣鍚嶇О
Group = "type",#鑺傜偣鐨勫垎缁?
Nodesize = "total_inter" ,#鑺傜偣澶у皬锛岃妭鐐规暟鎹涓?
###缇庡寲閮ㄥ垎
charge=-4000,
fontFamily="Arial",#瀛椾綋璁剧疆濡?"鍗庢枃琛屾シ" 绛?
fontSize = 40, #鑺傜偣鏂囨湰鏍囩鐨勬暟瀛楀瓧浣撳ぇ灏忥紙浠ュ儚绱犱负鍗曚綅锛夈€?
linkColour=ifelse(red_index,"red","black"),#杩炵嚎棰滆壊,black,red,blue,
colourScale=JS("d3.scaleOrdinal(d3.schemeCategory10);"), #鑺傜偣棰滆壊,red锛岃摑鑹瞓lue,cyan,yellow绛?
#linkWidth,#鑺傜偣棰滆壊,red锛岃摑鑹瞓lue,cyan,yellow绛?
#charge = -100,#鏁板€艰〃绀鸿妭鐐规帓鏂ュ己搴︼紙璐熷€硷級鎴栧惛寮曞姏锛堟鍊硷級
opacity = 0.9,
legend=F,#鏄剧ず鑺傜偣鍒嗙粍鐨勯鑹叉爣绛?
arrows=F,#鏄惁甯︽柟鍚?
#bounded=F,#鏄惁鍚敤闄愬埗鍥惧儚鐨勮竟妗?
#opacityNoHover=1.0,#褰撻紶鏍囨偓鍋滃湪鍏朵笂鏃讹紝鑺傜偣鏍囩鏂囨湰鐨勪笉閫忔槑搴︽瘮渚嬬殑鏁板€?
opacityNoHover=TRUE, #鏄剧ず鑺傜偣鏍囩鏂囨湰
#zoom = T#鍏佽鏀剧缉锛屽弻鍑绘斁澶?
width = 1200, height = 1200
)
NETWORK
saveNetwork(NETWORK,"networkRF2#.html",selfcontained=TRUE)#save HTML
options(java.parameters = "-Xmx24g")
library(xgboost)
library(lightgbm)
library(EIX)
library(Matrix)
library(ModelMetrics)
colindex<-c('IP',	'ENEG',	'NDE',	'ZIF',	'CTUBE',	'CBLACK',	'BIO',	'MT',	'NC',	'MNN',	'PYRID',	'PYRRO',	'RAMAN',	'BET',	'PTEMP',	'PTIME',	'RR',	'EC',	'CL',	'EPH',	'FE90')
r2_general <-function(preds,actual){
return(1- sum((preds - actual) ^ 2)/sum((actual - mean(actual))^2))
}
nthmax<-function(x,n){
y<-as.numeric(x)
y<-order(y,decreasing=TRUE)
return(x[y[n]])
}
##################################################
data_PC=read.csv("data_FE90.csv",head=T)
data_PC_train=read.csv("train_FE90.csv",head=T)
data_PC_test=read.csv("test_FE90.csv",head=T)
#set.seed(9)
#train <- sample(nrow(data_PC), 0.85*nrow(data_PC))
#data_PC_train=data_PC[train,]
#data_PC_test=data_PC[-train,]
#head(data_PC_train)
#head(data_PC_test)
num_trees<-200
##################################################
set.seed(3)
num_features<-dim(data_PC_train)[2]-1
#LGBM_train<-as.matrix(data_PC[,1:num_features])
LGBM_train<-as.matrix(data_PC_train[,1:num_features])
LGBM_test<-as.matrix(data_PC_test[,1:num_features])
data_PC_train$FE90
train_label<-data_PC_train$FE90
library(ggraph)
library(igraph)
library(tidyverse)
library(RColorBrewer)
library(pdp)
library(Rcpp)
library(randomForest)
library(randomForestExplainer)
library(caret)
library(networkD3)
library(shiny)
library(tidyverse)
source('min_depth_distribution.R')
source('measure_importance.R')
source('min_depth_interactions.R')
source('interaction.R')
colindex<-c('IP',	'ENEG',	'NDE',	'ZIF',	'CTUBE',	'CBLACK',	'BIO',	'MT',	'NC',	'MNN',	'PYRID',	'PYRRO',	'RAMAN',	'BET',	'PTEMP',	'PTIME',	'RR',	'EC',	'CL',	'EPH',	'FE90')
r2_general <-function(preds,actual){
return(1- sum((preds - actual) ^ 2)/sum((actual - mean(actual))^2))
}
nthmax<-function(x,n){
y<-as.numeric(x)
y<-order(y,decreasing=TRUE)
return(x[y[n]])
}
##################################################
#data_PC=read.csv("datatest_PC.csv",head=T)
data_PC_train=read.csv("training_data_PC.csv",head=T)
data_PC_test=read.csv("test_data_PC.csv",head=T)
#set.seed(39)
#train <- sample(nrow(data_PC), 0.85*nrow(data_PC))
#data_PC_train=data_PC[train,]
#data_PC_test=data_PC[-train,]
#head(data_PC_train)
#head(data_PC_test)
num_trees<-200
##################################################
set.seed(2)
forest <- randomForest(FE90 ~ .,type=classification, data = data_PC_train, ntree=num_trees, importance = TRUE)
##################################################
im_frame<-measure_importance(forest)
im_frame[4]<-im_frame[4]/max(im_frame[4])
im_frame[5]<-im_frame[5]/max(im_frame[5])
##################################################
c1<-rep(1:length(colindex),each=length(colindex))
c11<-colindex[c1]
c2<-rep(1:length(colindex),length(colindex))
c22<-colindex[c2]
rd_frame<-data.frame(c11,c22)
colnames(rd_frame)=c('variable','root_variable')
rd_frame<-merge(rd_frame,im_frame[c(1,6)],all.x=T)
pb1 <- tkProgressBar("??????","?????? %", 0, 100)
for (j in 1:forest$ntree){
info1<- sprintf("?????? %d%%", round(j*100/forest$ntree))
D<-calculate_max_depth(forest,j)
interactions_frame_single<-min_depth_interactions_single(forest,j,colindex)
rD<-calculate_rD(D,interactions_frame_single,j)
rD<-cbind(interactions_frame_single[1:2],rD)
rd_frame<-merge(rd_frame,rD,by=c('variable','root_variable'),all=T)
setTkProgressBar(pb1, j*100/forest$ntree, sprintf("???? (%s)", info1),info1)
}
close(pb1)
rd_frame[is.na(rd_frame)]<-0
for (k in 1:nrow(rd_frame)){
rd_frame[k,num_trees+4]<-sum(rd_frame[k,4:num_trees+3])/rd_frame[k,3]
}
r_frame<-rd_frame[c(1,2,num_trees+4)]
colnames(r_frame)<-c("variable" , "root_variable" ,"r")
##################################################
type<-data.frame(label=c(colindex[-21],'FE90'),
type=c(rep('Electronic_param',3),rep('Morphology_Param',4),rep('Catal_prop',7),rep('Synthesis_param',3),rep('Test_param',3),rep('Target',1)),
color=c(rep('#98dbef',3),rep('#a4e192',4),rep('#ffc177',7),rep('#000000',3),rep('#808000',3),
rep('#ffb6d4',1)))
nodes<-data.frame(id=c(1:length(colindex)),label=c(colindex[-21],'FE90'))
nodes<-merge(nodes,type,all.x=T)
nodes<-arrange(nodes,nodes['id'])
edges<-cbind(r_frame,c(rep('x-x',nrow(r_frame))))
colnames(edges)<-c('Source','Target','Weight','Type')
edges[is.na(edges)]<-0
edges[3]<-edges[3]/max(edges[3])
edges[3][edges[3]<0.5]<-0
edges<-edges[-which(edges[3]==0),]
edges<-edges[-which(edges[1]==edges[2]),]
for (j in 1:nrow(edges)){
j1<-which(edges[j,1]==edges[2])
j2<-which(edges[j,2]==edges[1])
j3<-intersect(j1,j2)
if (length(j3)!=0){
edges[j,3]<-mean(c(edges[j,3],edges[j3,3]))
edges<-edges[-j3,]
}
}
x_y<-data.frame(Source=c(rep('FE90',20)),
Target=im_frame$variable,
Weight=im_frame[4],
Type=c(rep('x-y',20)))
colnames(x_y)<-c('Source','Target','Weight','Type')
edges<-rbind(edges,x_y)
edges[3][edges[3]<=0]<-0
for (j in 1:nrow(nodes[1])){
edges[edges==nodes[j,1]]<-nodes[j,2]
}
##################################################
interactions_frame_rel <- min_depth_interactions(forest,mean_sample = "relevant_trees", uncond_mean_sample = "relevant_trees")
interactions_frame <- min_depth_interactions(forest)
plot_min_depth_distribution(forest)
plot_min_depth_interactions(interactions_frame)
plot_min_depth_interactions(interactions_frame_rel)
##################################################
write.csv(interactions_frame,paste0('sum/inter_sum','.csv'),row.names=FALSE,fileEncoding='UTF-8')
options(java.parameters = "-Xmx24g")
library(xlsx)
library(readxl)
library(hydroGOF)
library(randomForest)
library(ggplot2)
library(circlize)
library(RColorBrewer)
library(dplyr)
library(randomForestExplainer)
library(pdp)
library(tcltk)
library(patchwork)
library(caret)
library(ggrepel)
library(data.table)
library(ggraph)
library(igraph)
library(tidyverse)
library(RColorBrewer)
library(pdp)
library(Rcpp)
library(randomForest)
library(randomForestExplainer)
library(caret)
library(networkD3)
library(shiny)
library(tidyverse)
source('min_depth_distribution.R')
source('measure_importance.R')
source('min_depth_interactions.R')
source('interaction.R')
colindex<-c('IP',	'ENEG',	'NDE',	'ZIF',	'CTUBE',	'CBLACK',	'BIO',	'MT',	'NC',	'MNN',	'PYRID',	'PYRRO',	'RAMAN',	'BET',	'PTEMP',	'PTIME',	'RR',	'EC',	'CL',	'EPH',	'FE90')
r2_general <-function(preds,actual){
return(1- sum((preds - actual) ^ 2)/sum((actual - mean(actual))^2))
}
nthmax<-function(x,n){
y<-as.numeric(x)
y<-order(y,decreasing=TRUE)
return(x[y[n]])
}
##################################################
#data_PC=read.csv("datatest_PC.csv",head=T)
data_PC_train=read.csv("training_data_PC.csv",head=T)
data_PC_test=read.csv("test_data_PC.csv",head=T)
#set.seed(39)
#train <- sample(nrow(data_PC), 0.85*nrow(data_PC))
#data_PC_train=data_PC[train,]
#data_PC_test=data_PC[-train,]
#head(data_PC_train)
#head(data_PC_test)
num_trees<-200
##################################################
set.seed(2)
forest <- randomForest(FE90 ~ .,type=classification, data = data_PC_train, ntree=num_trees, importance = TRUE)
##################################################
#data_PC=read.csv("datatest_PC.csv",head=T)
data_PC_train=read.csv("training_data_PC.csv",head=T)
data_PC_test=read.csv("test_data_PC.csv",head=T)
source('measure_importance.R')
source('min_depth_interactions.R')
source('interaction.R')
options(java.parameters = "-Xmx24g")
library(xlsx)
library(readxl)
library(hydroGOF)
library(randomForest)
library(ggplot2)
library(circlize)
library(RColorBrewer)
library(dplyr)
library(randomForestExplainer)
library(pdp)
library(tcltk)
library(patchwork)
library(caret)
library(ggrepel)
library(data.table)
library(ggraph)
library(igraph)
library(tidyverse)
library(RColorBrewer)
library(pdp)
library(Rcpp)
library(randomForest)
library(randomForestExplainer)
library(caret)
library(networkD3)
library(shiny)
library(tidyverse)
source('min_depth_distribution.R')
source('measure_importance.R')
source('min_depth_interactions.R')
source('interaction.R')
colindex<-c('IP',	'ENEG',	'NDE',	'ZIF',	'CTUBE',	'CBLACK',	'BIO',	'MT',	'NC',	'MNN',	'PYRID',	'PYRRO',	'RAMAN',	'BET',	'PTEMP',	'PTIME',	'RR',	'EC',	'CL',	'EPH',	'FE90')
r2_general <-function(preds,actual){
return(1- sum((preds - actual) ^ 2)/sum((actual - mean(actual))^2))
}
nthmax<-function(x,n){
y<-as.numeric(x)
y<-order(y,decreasing=TRUE)
return(x[y[n]])
}
##################################################
#data_PC=read.csv("datatest_PC.csv",head=T)
data_PC_train=read.csv("training_FE90.csv",head=T)
data_PC_test=read.csv("test_FE90.csv",head=T)
#set.seed(39)
#train <- sample(nrow(data_PC), 0.85*nrow(data_PC))
#data_PC_train=data_PC[train,]
#data_PC_test=data_PC[-train,]
#head(data_PC_train)
#head(data_PC_test)
num_trees<-200
##################################################
set.seed(2)
forest_huge <- randomForest(FE90 ~ .,type=classification, data = data_PC_train, ntree=10000, importance = TRUE)
plot(forest_huge, main = "Learning curve of the forest")
forest <- randomForest(FE90 ~ .,type=classification, data = data_PC_train, ntree=num_trees, importance = TRUE)
library(xlsx)
library(readxl)
library(hydroGOF)
library(randomForest)
library(ggplot2)
library(circlize)
library(RColorBrewer)
library(dplyr)
library(randomForestExplainer)
library(pdp)
library(tcltk)
library(patchwork)
library(caret)
library(ggrepel)
library(data.table)
library(ggraph)
library(igraph)
library(tidyverse)
library(RColorBrewer)
library(pdp)
library(Rcpp)
library(randomForest)
library(randomForestExplainer)
library(caret)
library(networkD3)
library(shiny)
library(tidyverse)
source('min_depth_distribution.R')
source('measure_importance.R')
source('min_depth_interactions.R')
source('interaction.R')
colindex<-c('IP',	'ENEG',	'NDE',	'ZIF',	'CTUBE',	'CBLACK',	'BIO',	'MT',	'NC',	'MNN',	'PYRID',	'PYRRO',	'RAMAN',	'BET',	'PTEMP',	'PTIME',	'RR',	'EC',	'CL',	'EPH',	'FE90')
r2_general <-function(preds,actual){
return(1- sum((preds - actual) ^ 2)/sum((actual - mean(actual))^2))
}
nthmax<-function(x,n){
y<-as.numeric(x)
y<-order(y,decreasing=TRUE)
return(x[y[n]])
}
##################################################
#data_PC=read.csv("datatest_PC.csv",head=T)
data_PC_train=read.csv("train_FE90.csv",head=T)
data_PC_test=read.csv("test_FE90.csv",head=T)
#set.seed(39)
#train <- sample(nrow(data_PC), 0.85*nrow(data_PC))
#data_PC_train=data_PC[train,]
#data_PC_test=data_PC[-train,]
#head(data_PC_train)
#head(data_PC_test)
num_trees<-200
##################################################
set.seed(2)
forest <- randomForest(FE90 ~ .,type=regression, data = data_PC_train, ntree=num_trees, importance = TRUE)
#set.seed(39)
#train <- sample(nrow(data_PC), 0.85*nrow(data_PC))
#data_PC_train=data_PC[train,]
#data_PC_test=data_PC[-train,]
#head(data_PC_train)
#head(data_PC_test)
num_trees<-200
forest <- randomForest(FE90 ~ .,type=classification, data = data_PC_train, ntree=num_trees, importance = TRUE)
##################################################
im_frame<-measure_importance(forest)
im_frame[4]<-im_frame[4]/max(im_frame[4])
im_frame[5]<-im_frame[5]/max(im_frame[5])
##################################################
c1<-rep(1:length(colindex),each=length(colindex))
c11<-colindex[c1]
c2<-rep(1:length(colindex),length(colindex))
c22<-colindex[c2]
rd_frame<-data.frame(c11,c22)
colnames(rd_frame)=c('variable','root_variable')
rd_frame<-merge(rd_frame,im_frame[c(1,6)],all.x=T)
pb1 <- tkProgressBar("??????","?????? %", 0, 100)
for (j in 1:forest$ntree){
info1<- sprintf("?????? %d%%", round(j*100/forest$ntree))
D<-calculate_max_depth(forest,j)
interactions_frame_single<-min_depth_interactions_single(forest,j,colindex)
rD<-calculate_rD(D,interactions_frame_single,j)
rD<-cbind(interactions_frame_single[1:2],rD)
rd_frame<-merge(rd_frame,rD,by=c('variable','root_variable'),all=T)
setTkProgressBar(pb1, j*100/forest$ntree, sprintf("???? (%s)", info1),info1)
}
close(pb1)
rd_frame[is.na(rd_frame)]<-0
for (k in 1:nrow(rd_frame)){
rd_frame[k,num_trees+4]<-sum(rd_frame[k,4:num_trees+3])/rd_frame[k,3]
}
r_frame<-rd_frame[c(1,2,num_trees+4)]
colnames(r_frame)<-c("variable" , "root_variable" ,"r")
##################################################
type<-data.frame(label=c(colindex[-21],'FE90'),
type=c(rep('Electronic_param',3),rep('Morphology_Param',4),rep('Catal_prop',7),rep('Synthesis_param',3),rep('Test_param',3),rep('Target',1)),
color=c(rep('#98dbef',3),rep('#a4e192',4),rep('#ffc177',7),rep('#000000',3),rep('#808000',3),
rep('#ffb6d4',1)))
nodes<-data.frame(id=c(1:length(colindex)),label=c(colindex[-21],'FE90'))
nodes<-merge(nodes,type,all.x=T)
nodes<-arrange(nodes,nodes['id'])
edges<-cbind(r_frame,c(rep('x-x',nrow(r_frame))))
colnames(edges)<-c('Source','Target','Weight','Type')
edges[is.na(edges)]<-0
edges[3]<-edges[3]/max(edges[3])
edges[3][edges[3]<0.5]<-0
edges<-edges[-which(edges[3]==0),]
edges<-edges[-which(edges[1]==edges[2]),]
for (j in 1:nrow(edges)){
j1<-which(edges[j,1]==edges[2])
j2<-which(edges[j,2]==edges[1])
j3<-intersect(j1,j2)
if (length(j3)!=0){
edges[j,3]<-mean(c(edges[j,3],edges[j3,3]))
edges<-edges[-j3,]
}
}
x_y<-data.frame(Source=c(rep('FE90',20)),
Target=im_frame$variable,
Weight=im_frame[4],
Type=c(rep('x-y',20)))
colnames(x_y)<-c('Source','Target','Weight','Type')
edges<-rbind(edges,x_y)
edges[3][edges[3]<=0]<-0
for (j in 1:nrow(nodes[1])){
edges[edges==nodes[j,1]]<-nodes[j,2]
}
##################################################
interactions_frame_rel <- min_depth_interactions(forest,mean_sample = "relevant_trees", uncond_mean_sample = "relevant_trees")
interactions_frame <- min_depth_interactions(forest)
plot_min_depth_distribution(forest)
plot_min_depth_interactions(interactions_frame)
plot_min_depth_interactions(interactions_frame_rel)
##################################################
write.csv(interactions_frame,paste0('sum/inter_sum','.csv'),row.names=FALSE,fileEncoding='UTF-8')
##################################################
total_inter_counts<-c(3079, 3744, 2945, 2544, 1074, 857, 1071, 3915, 4165, 3992, 4090, 3769, 3580, 3984, 3426, 3064, 3490, 1362, 3368, 3005)
total_inter_counts<-100*(total_inter_counts/max(total_inter_counts))*(total_inter_counts/max(total_inter_counts))*(total_inter_counts/max(total_inter_counts))*(total_inter_counts/max(total_inter_counts))
nodes$total_inter<-c(total_inter_counts,max(total_inter_counts))
##################################################
#write.csv(nodes,paste0('test/nodes----','FE90','.csv'),row.names=FALSE,fileEncoding='UTF-8')
#write.csv(edges,paste0('test/edges----','FE90','.csv'),row.names=FALSE,fileEncoding='UTF-8')
##################################################
#EDG<-read_csv('test/edges----FE90.csv')
#NDS<-read_csv('test/nodes----FE90.csv')
##################################################
EDG<-edges
NDS<-nodes
EDG[1]<-sapply(EDG[1],as.numeric)
EDG[2]<-sapply(EDG[2],as.numeric)
EDG[1]<-EDG[1]-1
NDS[2]<-NDS[2]-1
EDG[3]<-10*EDG[3]*EDG[3]*EDG[3]*EDG[3]
red_index<-((EDG $ Weight> (nthmax(EDG$Weight,21)))&(EDG$Source!=20)&(EDG$Target!=20))[,1]
##################################################
NETWORK <- forceNetwork(Links = EDG,#绾挎€ц川鏁版嵁妗?
Nodes = NDS,#鑺傜偣鎬ц川鏁版嵁妗?
Source = "Source",#杩炵嚎鐨勬簮鍙橀噺
Target = "Target",#杩炵嚎鐨勭洰鏍囧彉閲?
Value = "Weight",#杩炵嚎鐨勭矖缁嗗€?
NodeID = "label",#鑺傜偣鍚嶇О
Group = "type",#鑺傜偣鐨勫垎缁?
Nodesize = "total_inter" ,#鑺傜偣澶у皬锛岃妭鐐规暟鎹涓?
###缇庡寲閮ㄥ垎
charge=-4000,
fontFamily="Arial",#瀛椾綋璁剧疆濡?"鍗庢枃琛屾シ" 绛?
fontSize = 40, #鑺傜偣鏂囨湰鏍囩鐨勬暟瀛楀瓧浣撳ぇ灏忥紙浠ュ儚绱犱负鍗曚綅锛夈€?
linkColour=ifelse(red_index,"red","black"),#杩炵嚎棰滆壊,black,red,blue,
colourScale=JS("d3.scaleOrdinal(d3.schemeCategory10);"), #鑺傜偣棰滆壊,red锛岃摑鑹瞓lue,cyan,yellow绛?
#linkWidth,#鑺傜偣棰滆壊,red锛岃摑鑹瞓lue,cyan,yellow绛?
#charge = -100,#鏁板€艰〃绀鸿妭鐐规帓鏂ュ己搴︼紙璐熷€硷級鎴栧惛寮曞姏锛堟鍊硷級
opacity = 0.9,
legend=F,#鏄剧ず鑺傜偣鍒嗙粍鐨勯鑹叉爣绛?
arrows=F,#鏄惁甯︽柟鍚?
#bounded=F,#鏄惁鍚敤闄愬埗鍥惧儚鐨勮竟妗?
#opacityNoHover=1.0,#褰撻紶鏍囨偓鍋滃湪鍏朵笂鏃讹紝鑺傜偣鏍囩鏂囨湰鐨勪笉閫忔槑搴︽瘮渚嬬殑鏁板€?
opacityNoHover=TRUE, #鏄剧ず鑺傜偣鏍囩鏂囨湰
#zoom = T#鍏佽鏀剧缉锛屽弻鍑绘斁澶?
width = 1200, height = 1200
)
NETWORK
saveNetwork(NETWORK,"networkRF2#.html",selfcontained=TRUE)#save HTML
